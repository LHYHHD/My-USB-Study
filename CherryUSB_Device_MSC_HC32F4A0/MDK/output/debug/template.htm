<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Oct 27 13:03:50 2024
<BR><P>
<H3>Maximum Stack Usage =        496 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; f_mkfs &rArr; disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SysTick_Handler</a><BR>
 <LI><a href="#[a8]">DDL_AssertHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a8]">DDL_AssertHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">BusFault_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[c]">IRQ000_Handler</a> from hc32_ll_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[d]">IRQ001_Handler</a> from hc32_ll_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[e]">IRQ002_Handler</a> from hc32_ll_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[f]">IRQ003_Handler</a> from hc32_ll_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[10]">IRQ004_Handler</a> from hc32_ll_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[11]">IRQ005_Handler</a> from hc32_ll_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[12]">IRQ006_Handler</a> from hc32_ll_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[13]">IRQ007_Handler</a> from hc32_ll_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[14]">IRQ008_Handler</a> from hc32_ll_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[15]">IRQ009_Handler</a> from hc32_ll_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[16]">IRQ010_Handler</a> from hc32_ll_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[17]">IRQ011_Handler</a> from hc32_ll_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[18]">IRQ012_Handler</a> from hc32_ll_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[19]">IRQ013_Handler</a> from hc32_ll_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1a]">IRQ014_Handler</a> from hc32_ll_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1b]">IRQ015_Handler</a> from hc32_ll_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1c]">IRQ016_Handler</a> from hc32_ll_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1d]">IRQ017_Handler</a> from hc32_ll_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1e]">IRQ018_Handler</a> from hc32_ll_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1f]">IRQ019_Handler</a> from hc32_ll_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[20]">IRQ020_Handler</a> from hc32_ll_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[21]">IRQ021_Handler</a> from hc32_ll_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[22]">IRQ022_Handler</a> from hc32_ll_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[23]">IRQ023_Handler</a> from hc32_ll_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[24]">IRQ024_Handler</a> from hc32_ll_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[25]">IRQ025_Handler</a> from hc32_ll_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[26]">IRQ026_Handler</a> from hc32_ll_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[27]">IRQ027_Handler</a> from hc32_ll_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[28]">IRQ028_Handler</a> from hc32_ll_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[29]">IRQ029_Handler</a> from hc32_ll_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2a]">IRQ030_Handler</a> from hc32_ll_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2b]">IRQ031_Handler</a> from hc32_ll_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2c]">IRQ032_Handler</a> from hc32_ll_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2d]">IRQ033_Handler</a> from hc32_ll_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2e]">IRQ034_Handler</a> from hc32_ll_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2f]">IRQ035_Handler</a> from hc32_ll_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[30]">IRQ036_Handler</a> from hc32_ll_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[31]">IRQ037_Handler</a> from hc32_ll_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[32]">IRQ038_Handler</a> from hc32_ll_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[33]">IRQ039_Handler</a> from hc32_ll_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[34]">IRQ040_Handler</a> from hc32_ll_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[35]">IRQ041_Handler</a> from hc32_ll_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[36]">IRQ042_Handler</a> from hc32_ll_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[37]">IRQ043_Handler</a> from hc32_ll_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[38]">IRQ044_Handler</a> from hc32_ll_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[39]">IRQ045_Handler</a> from hc32_ll_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3a]">IRQ046_Handler</a> from hc32_ll_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3b]">IRQ047_Handler</a> from hc32_ll_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3c]">IRQ048_Handler</a> from hc32_ll_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3d]">IRQ049_Handler</a> from hc32_ll_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3e]">IRQ050_Handler</a> from hc32_ll_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3f]">IRQ051_Handler</a> from hc32_ll_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[40]">IRQ052_Handler</a> from hc32_ll_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[41]">IRQ053_Handler</a> from hc32_ll_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[42]">IRQ054_Handler</a> from hc32_ll_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[43]">IRQ055_Handler</a> from hc32_ll_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[44]">IRQ056_Handler</a> from hc32_ll_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[45]">IRQ057_Handler</a> from hc32_ll_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[46]">IRQ058_Handler</a> from hc32_ll_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[47]">IRQ059_Handler</a> from hc32_ll_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[48]">IRQ060_Handler</a> from hc32_ll_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[49]">IRQ061_Handler</a> from hc32_ll_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4a]">IRQ062_Handler</a> from hc32_ll_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4b]">IRQ063_Handler</a> from hc32_ll_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4c]">IRQ064_Handler</a> from hc32_ll_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4d]">IRQ065_Handler</a> from hc32_ll_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4e]">IRQ066_Handler</a> from hc32_ll_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4f]">IRQ067_Handler</a> from hc32_ll_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[50]">IRQ068_Handler</a> from hc32_ll_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[51]">IRQ069_Handler</a> from hc32_ll_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[52]">IRQ070_Handler</a> from hc32_ll_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[53]">IRQ071_Handler</a> from hc32_ll_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[54]">IRQ072_Handler</a> from hc32_ll_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[55]">IRQ073_Handler</a> from hc32_ll_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[56]">IRQ074_Handler</a> from hc32_ll_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[57]">IRQ075_Handler</a> from hc32_ll_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[58]">IRQ076_Handler</a> from hc32_ll_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[59]">IRQ077_Handler</a> from hc32_ll_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5a]">IRQ078_Handler</a> from hc32_ll_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5b]">IRQ079_Handler</a> from hc32_ll_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5c]">IRQ080_Handler</a> from hc32_ll_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5d]">IRQ081_Handler</a> from hc32_ll_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5e]">IRQ082_Handler</a> from hc32_ll_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5f]">IRQ083_Handler</a> from hc32_ll_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[60]">IRQ084_Handler</a> from hc32_ll_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[61]">IRQ085_Handler</a> from hc32_ll_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[62]">IRQ086_Handler</a> from hc32_ll_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[63]">IRQ087_Handler</a> from hc32_ll_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[64]">IRQ088_Handler</a> from hc32_ll_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[65]">IRQ089_Handler</a> from hc32_ll_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[66]">IRQ090_Handler</a> from hc32_ll_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[67]">IRQ091_Handler</a> from hc32_ll_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[68]">IRQ092_Handler</a> from hc32_ll_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[69]">IRQ093_Handler</a> from hc32_ll_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6a]">IRQ094_Handler</a> from hc32_ll_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6b]">IRQ095_Handler</a> from hc32_ll_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6c]">IRQ096_Handler</a> from hc32_ll_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6d]">IRQ097_Handler</a> from hc32_ll_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6e]">IRQ098_Handler</a> from hc32_ll_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6f]">IRQ099_Handler</a> from hc32_ll_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[70]">IRQ100_Handler</a> from hc32_ll_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[71]">IRQ101_Handler</a> from hc32_ll_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[72]">IRQ102_Handler</a> from hc32_ll_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[73]">IRQ103_Handler</a> from hc32_ll_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[74]">IRQ104_Handler</a> from hc32_ll_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[75]">IRQ105_Handler</a> from hc32_ll_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[76]">IRQ106_Handler</a> from hc32_ll_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[77]">IRQ107_Handler</a> from hc32_ll_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[78]">IRQ108_Handler</a> from hc32_ll_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[79]">IRQ109_Handler</a> from hc32_ll_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7a]">IRQ110_Handler</a> from hc32_ll_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7b]">IRQ111_Handler</a> from hc32_ll_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7c]">IRQ112_Handler</a> from hc32_ll_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7d]">IRQ113_Handler</a> from hc32_ll_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7e]">IRQ114_Handler</a> from hc32_ll_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7f]">IRQ115_Handler</a> from hc32_ll_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[80]">IRQ116_Handler</a> from hc32_ll_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[81]">IRQ117_Handler</a> from hc32_ll_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[82]">IRQ118_Handler</a> from hc32_ll_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[83]">IRQ119_Handler</a> from hc32_ll_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[84]">IRQ120_Handler</a> from hc32_ll_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[85]">IRQ121_Handler</a> from hc32_ll_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[86]">IRQ122_Handler</a> from hc32_ll_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[87]">IRQ123_Handler</a> from hc32_ll_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[88]">IRQ124_Handler</a> from hc32_ll_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[89]">IRQ125_Handler</a> from hc32_ll_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8a]">IRQ126_Handler</a> from hc32_ll_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8b]">IRQ127_Handler</a> from hc32_ll_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8c]">IRQ128_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ128_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8d]">IRQ129_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ129_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8e]">IRQ130_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ130_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8f]">IRQ131_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ131_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[90]">IRQ132_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ132_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[91]">IRQ133_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ133_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[92]">IRQ134_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ134_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[93]">IRQ135_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ135_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[94]">IRQ136_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ136_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[95]">IRQ137_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ137_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[96]">IRQ138_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ138_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[97]">IRQ139_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ139_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[98]">IRQ140_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ140_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[99]">IRQ141_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ141_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9a]">IRQ142_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ142_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9b]">IRQ143_Handler</a> from hc32f4a0_ll_interrupts_share.o(i.IRQ143_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9d]">SystemInit</a> from system_hc32f4a0.o(i.SystemInit) referenced from startup_hc32f4a0.o(.text)
 <LI><a href="#[a1]">USB_IRQ_Handler</a> from msc_storage.o(i.USB_IRQ_Handler) referenced from msc_storage.o(i.usb_dc_low_level_init)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f4a0.o(.text)
 <LI><a href="#[9f]">fputc</a> from uart1.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[9c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a7]">mass_storage_bulk_in</a> from usbd_msc.o(i.mass_storage_bulk_in) referenced from usbd_msc.o(i.usbd_msc_init_intf)
 <LI><a href="#[a6]">mass_storage_bulk_out</a> from usbd_msc.o(i.mass_storage_bulk_out) referenced from usbd_msc.o(i.usbd_msc_init_intf)
 <LI><a href="#[a4]">msc_storage_class_interface_request_handler</a> from usbd_msc.o(i.msc_storage_class_interface_request_handler) referenced from usbd_msc.o(i.usbd_msc_init_intf)
 <LI><a href="#[a5]">msc_storage_notify_handler</a> from usbd_msc.o(i.msc_storage_notify_handler) referenced from usbd_msc.o(i.usbd_msc_init_intf)
 <LI><a href="#[0]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[1]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced 2 times from malloc.o(.data)
 <LI><a href="#[a2]">usbd_event_ep0_in_complete_handler</a> from usbd_core.o(i.usbd_event_ep0_in_complete_handler) referenced from usbd_core.o(i.usbd_desc_register)
 <LI><a href="#[a3]">usbd_event_ep0_out_complete_handler</a> from usbd_core.o(i.usbd_event_ep0_out_complete_handler) referenced from usbd_core.o(i.usbd_desc_register)
 <LI><a href="#[a0]">usbd_event_handler</a> from msc_storage.o(i.usbd_event_handler) referenced from msc_storage.o(i.msc_storage_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(.text)
</UL>
<P><STRONG><a name="[3a8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[266]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[282]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3aa]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3ab]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3ac]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[3ad]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3ae]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[268]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense6
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[2e5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[34c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_desc_register
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[3b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[359]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_GetDfltPara
</UL>

<P><STRONG><a name="[2b8]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_GetDfltPara
</UL>

<P><STRONG><a name="[3b3]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>ADC1_Cmp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC1_Cmp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[3b4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>ADC1_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC1_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[26e]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_GetDfltPara
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[272]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_GetDfltPara
</UL>

<P><STRONG><a name="[274]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27c]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_GetDfltPara
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_GetDfltPara
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[389]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[352]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[3b5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3b6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3b7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3b8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[26f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[277]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[276]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[281]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[267]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3b9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>ADC1_CmpComb_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC1_CmpComb_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[ac]"></a>ADC1_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC1_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[ad]"></a>ADC1_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC1_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[ae]"></a>ADC2_Cmp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC2_Cmp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[af]"></a>ADC2_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC2_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b0]"></a>ADC2_CmpComb_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC2_CmpComb_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b1]"></a>ADC2_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC2_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b2]"></a>ADC2_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC2_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b3]"></a>ADC3_Cmp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC3_Cmp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b4]"></a>ADC3_Cmp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC3_Cmp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b5]"></a>ADC3_CmpComb_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC3_CmpComb_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b6]"></a>ADC3_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC3_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b7]"></a>ADC3_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ADC3_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[b8]"></a>CAN1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.CAN1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[b9]"></a>CAN2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.CAN2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[283]"></a>CLK_GetStableStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_GetStableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>

<P><STRONG><a name="[284]"></a>CLK_HrcCmd</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_HrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_HrcCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtsInit
</UL>

<P><STRONG><a name="[286]"></a>CLK_LrcCmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_LrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_LrcCmd &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtsInit
</UL>

<P><STRONG><a name="[288]"></a>CLK_PLLCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_PLLCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
</UL>

<P><STRONG><a name="[289]"></a>CLK_PLLInit</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, hc32_ll_clk.o(i.CLK_PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[386]"></a>CLK_PLLStructInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_PLLStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[28a]"></a>CLK_PLLxCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_PLLxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_PLLxCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLxInit
</UL>

<P><STRONG><a name="[28b]"></a>CLK_PLLxInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_PLLxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_PLLxInit &rArr; CLK_PLLxCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLxCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLxParamCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[387]"></a>CLK_PLLxStructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_PLLxStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[28d]"></a>CLK_SetClockDiv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetClockDiv &rArr; SetSysClockDiv &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[290]"></a>CLK_SetSysClockSrc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetSysClockSrc &rArr; SetSysClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[292]"></a>CLK_SetUSBClockSrc</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_SetUSBClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_SetUSBClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[293]"></a>CLK_Xtal32Cmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_Xtal32Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_Xtal32Cmd &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtsInit
</UL>

<P><STRONG><a name="[294]"></a>CLK_XtalCmd</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
</UL>

<P><STRONG><a name="[295]"></a>CLK_XtalInit</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_XtalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_XtalInit &rArr; CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[ba]"></a>CLK_XtalStop_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.CLK_XtalStop_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[385]"></a>CLK_XtalStructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_XtalStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[bb]"></a>CTC_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.CTC_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[bc]"></a>CTC_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.CTC_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[297]"></a>CountTimer_Tmr0Unit2CHB_Init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, tmr0.o(i.CountTimer_Tmr0Unit2CHB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CountTimer_Tmr0Unit2CHB_Init &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_StructInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>DCU1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[be]"></a>DCU2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[bf]"></a>DCU3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c0]"></a>DCU4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c1]"></a>DCU5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c2]"></a>DCU6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c3]"></a>DCU7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c4]"></a>DCU8_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DCU8_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[a8]"></a>DDL_AssertHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32_ll_utility.o(i.DDL_AssertHandler))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetUSBClockSrc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLxCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_LrcCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLxParamCheck
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_VBAT_Reset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_VBAT_PowerCmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_Write
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_Read
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_PowerCmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePins
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChCmd
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearStatus
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayTimeConfig
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxRx
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_WriteBuffer
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_VerifyClockDiv
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetSpeedMode
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClockDiv
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetBusWidth
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SWReset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_PowerCmd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_IntCmd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetPowerState
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetMode
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetIntStatus
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetIntEnableState
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetHostStatus
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClockCmd
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearIntStatus
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ShareIrqCmd
</UL>

<P><STRONG><a name="[326]"></a>DDL_DelayMS</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc32_ll_utility.o(i.DDL_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDL_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[287]"></a>DDL_DelayUS</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32_ll_utility.o(i.DDL_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetUSBClockSrc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_LrcCmd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
</UL>

<P><STRONG><a name="[c5]"></a>DMA1_BTC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c6]"></a>DMA1_BTC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c7]"></a>DMA1_BTC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c8]"></a>DMA1_BTC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c9]"></a>DMA1_BTC4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ca]"></a>DMA1_BTC5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[cb]"></a>DMA1_BTC6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[cc]"></a>DMA1_BTC7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_BTC7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[cd]"></a>DMA1_Error0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ce]"></a>DMA1_Error1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[cf]"></a>DMA1_Error2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d0]"></a>DMA1_Error3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d1]"></a>DMA1_Error4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d2]"></a>DMA1_Error5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d3]"></a>DMA1_Error6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d4]"></a>DMA1_Error7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_Error7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d5]"></a>DMA1_TC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d6]"></a>DMA1_TC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d7]"></a>DMA1_TC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d8]"></a>DMA1_TC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[d9]"></a>DMA1_TC4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[da]"></a>DMA1_TC5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[db]"></a>DMA1_TC6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[dc]"></a>DMA1_TC7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA1_TC7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[dd]"></a>DMA2_BTC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[de]"></a>DMA2_BTC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[df]"></a>DMA2_BTC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e0]"></a>DMA2_BTC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e1]"></a>DMA2_BTC4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e2]"></a>DMA2_BTC5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e3]"></a>DMA2_BTC6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e4]"></a>DMA2_BTC7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_BTC7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e5]"></a>DMA2_Error0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e6]"></a>DMA2_Error1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e7]"></a>DMA2_Error2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e8]"></a>DMA2_Error3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[e9]"></a>DMA2_Error4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[ea]"></a>DMA2_Error5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[eb]"></a>DMA2_Error6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[ec]"></a>DMA2_Error7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_Error7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[ed]"></a>DMA2_TC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[ee]"></a>DMA2_TC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[ef]"></a>DMA2_TC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f0]"></a>DMA2_TC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f1]"></a>DMA2_TC4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f2]"></a>DMA2_TC5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f3]"></a>DMA2_TC6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f4]"></a>DMA2_TC7_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DMA2_TC7_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[29b]"></a>DMA_ChCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_dma.o(i.DMA_ChCmd), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ChCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>DVP_FifoError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DVP_FifoError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f6]"></a>DVP_FrameEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DVP_FrameEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f7]"></a>DVP_FrameStart_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DVP_FrameStart_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f8]"></a>DVP_LineEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DVP_LineEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[f9]"></a>DVP_LineStart_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DVP_LineStart_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[fa]"></a>DVP_SWSyncError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.DVP_SWSyncError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[fb]"></a>EFM_ColError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EFM_ColError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fc]"></a>EFM_OpEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EFM_OpEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fd]"></a>EFM_ProgramEraseError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EFM_ProgramEraseError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[29c]"></a>EFM_SetWaitCycle</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, hc32_ll_efm.o(i.EFM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[fe]"></a>EMB_GR0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EMB_GR0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[ff]"></a>EMB_GR1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EMB_GR1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[100]"></a>EMB_GR2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EMB_GR2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[101]"></a>EMB_GR3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EMB_GR3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[102]"></a>EMB_GR4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EMB_GR4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[103]"></a>EMB_GR5_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EMB_GR5_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[104]"></a>EMB_GR6_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EMB_GR6_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[105]"></a>ETH_Global_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ETH_Global_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[106]"></a>ETH_Wakeup_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.ETH_Wakeup_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[107]"></a>EXTINT00_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT00_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[108]"></a>EXTINT01_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT01_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[109]"></a>EXTINT02_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT02_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[10a]"></a>EXTINT03_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT03_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[10b]"></a>EXTINT04_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT04_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[10c]"></a>EXTINT05_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT05_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[10d]"></a>EXTINT06_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT06_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[10e]"></a>EXTINT07_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT07_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[10f]"></a>EXTINT08_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT08_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[110]"></a>EXTINT09_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT09_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[111]"></a>EXTINT10_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT10_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[112]"></a>EXTINT11_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT11_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[113]"></a>EXTINT12_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT12_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[114]"></a>EXTINT13_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT13_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[115]"></a>EXTINT14_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT14_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[116]"></a>EXTINT15_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.EXTINT15_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[29d]"></a>FCG_Fcg1PeriphClockCmd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[298]"></a>FCG_Fcg2PeriphClockCmd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTimer_Tmr0Unit2CHB_Init
</UL>

<P><STRONG><a name="[29e]"></a>FCG_Fcg3PeriphClockCmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg3PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg3PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtsInit
</UL>

<P><STRONG><a name="[117]"></a>FCM_End_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.FCM_End_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[118]"></a>FCM_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.FCM_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[119]"></a>FCM_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.FCM_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[11a]"></a>FMAC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.FMAC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11b]"></a>FMAC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.FMAC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11c]"></a>FMAC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.FMAC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[11d]"></a>FMAC4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.FMAC4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[29f]"></a>GPIO_Init</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, hc32_ll_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[2a0]"></a>GPIO_ReadInputPins</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_ReadInputPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSdCardInsertState
</UL>

<P><STRONG><a name="[2a1]"></a>GPIO_SetFunc</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>

<P><STRONG><a name="[2a2]"></a>GPIO_SetReadWaitCycle</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, hc32_ll_gpio.o(i.GPIO_SetReadWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetReadWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[33b]"></a>GPIO_StructInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32_ll_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[2a3]"></a>GPIO_TogglePins</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_TogglePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_TogglePins
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a4]"></a>GetSdCardInsertState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sd_diskio.o(i.GetSdCardInsertState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetSdCardInsertState &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[11e]"></a>I2C1_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C1_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[11f]"></a>I2C1_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C1_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[120]"></a>I2C1_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C1_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[121]"></a>I2C1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[122]"></a>I2C2_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C2_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[123]"></a>I2C2_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C2_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[124]"></a>I2C2_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C2_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[125]"></a>I2C2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[126]"></a>I2C3_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C3_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[127]"></a>I2C3_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C3_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[128]"></a>I2C3_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C3_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[129]"></a>I2C3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[12a]"></a>I2C4_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C4_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[12b]"></a>I2C4_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C4_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[12c]"></a>I2C4_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C4_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[12d]"></a>I2C4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[12e]"></a>I2C5_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C5_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[12f]"></a>I2C5_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C5_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[130]"></a>I2C5_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C5_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[131]"></a>I2C5_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C5_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[132]"></a>I2C6_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C6_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[133]"></a>I2C6_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C6_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[134]"></a>I2C6_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C6_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[135]"></a>I2C6_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2C6_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[136]"></a>I2S1_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S1_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[137]"></a>I2S1_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S1_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[138]"></a>I2S1_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S1_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[139]"></a>I2S2_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S2_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[13a]"></a>I2S2_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S2_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[13b]"></a>I2S2_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S2_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[13c]"></a>I2S3_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S3_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[13d]"></a>I2S3_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S3_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[13e]"></a>I2S3_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S3_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[13f]"></a>I2S4_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S4_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[140]"></a>I2S4_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S4_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[141]"></a>I2S4_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.I2S4_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[2a5]"></a>INTC_IrqSignIn</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32_ll_interrupts.o(i.INTC_IrqSignIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[2a6]"></a>INTC_ShareIrqCmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.INTC_ShareIrqCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTC_ShareIrqCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[c]"></a>IRQ000_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ001_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ002_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ003_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ004_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ005_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ006_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ007_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ008_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ009_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ010_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ011_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ012_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ013_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ014_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ015_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ016_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ017_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ018_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ019_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ020_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ021_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ022_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ023_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ024_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ025_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ026_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ027_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ028_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ029_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ030_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ031_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ032_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ033_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ034_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ035_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ036_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ037_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ038_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ039_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ040_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ041_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ042_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ043_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ044_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ045_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ046_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ047_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ048_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ049_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ050_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ051_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ052_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ053_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ054_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ055_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ056_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ057_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ058_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ059_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ060_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ061_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ062_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ063_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ064_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ065_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ066_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ067_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ068_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ069_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ070_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ071_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ072_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ073_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ074_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ075_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ076_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ077_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ078_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ079_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ080_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ081_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ082_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ083_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ084_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ085_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ086_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ087_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ088_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ089_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ090_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ091_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ092_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ093_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ094_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ095_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ096_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ097_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ098_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ099_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ100_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ101_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ102_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ103_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ104_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ105_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ106_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ107_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ108_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ109_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ110_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ111_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ112_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ113_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ114_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ115_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ116_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ117_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ118_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ119_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ120_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ121_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ122_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ123_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ124_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ125_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ126_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ127_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ128_Handler</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ128_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ128_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT15_IrqHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT14_IrqHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT13_IrqHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT12_IrqHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT11_IrqHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT10_IrqHandler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT09_IrqHandler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT08_IrqHandler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT07_IrqHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT06_IrqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT05_IrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT04_IrqHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT03_IrqHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT02_IrqHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT01_IrqHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT00_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ129_Handler</STRONG> (Thumb, 986 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ129_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ129_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Error_IrqHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ProgramEraseError_IrqHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_OpEnd_IrqHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ColError_IrqHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC7_IrqHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC6_IrqHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC5_IrqHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC4_IrqHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC3_IrqHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC2_IrqHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC1_IrqHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC0_IrqHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error7_IrqHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error6_IrqHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error5_IrqHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error4_IrqHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error3_IrqHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error2_IrqHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error1_IrqHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error0_IrqHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC7_IrqHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC6_IrqHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC5_IrqHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC4_IrqHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC3_IrqHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC2_IrqHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC1_IrqHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC0_IrqHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU8_IrqHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU7_IrqHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU6_IrqHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU5_IrqHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU4_IrqHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU3_IrqHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU2_IrqHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU1_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ130_Handler</STRONG> (Thumb, 914 bytes, Stack size 24 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ130_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ130_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAU_Sqrt_IrqHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC4_IrqHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC3_IrqHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC2_IrqHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMAC1_IrqHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_SWSyncError_IrqHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_LineStart_IrqHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_LineEnd_IrqHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_FrameStart_IrqHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_FrameEnd_IrqHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DVP_FifoError_IrqHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC7_IrqHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC6_IrqHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC5_IrqHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC4_IrqHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC3_IrqHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC2_IrqHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC1_IrqHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC0_IrqHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error7_IrqHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error6_IrqHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error5_IrqHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error4_IrqHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error3_IrqHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error2_IrqHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error1_IrqHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error0_IrqHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC7_IrqHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC6_IrqHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC5_IrqHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC4_IrqHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC3_IrqHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC2_IrqHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC1_IrqHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC0_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ131_Handler</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ131_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IRQ131_Handler &rArr; RTC_Period_IrqHandler &rArr; sw12Hour &rArr; setDataTime &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Period_IrqHandler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IrqHandler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_OvfB_IrqHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_OvfA_IrqHandler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_CmpB_IrqHandler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_4_CmpA_IrqHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_OvfB_IrqHandler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_OvfA_IrqHandler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_CmpB_IrqHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_3_CmpA_IrqHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_OvfB_IrqHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_OvfA_IrqHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_CmpB_IrqHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_2_CmpA_IrqHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_OvfB_IrqHandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_OvfA_IrqHandler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_CmpB_IrqHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_1_CmpA_IrqHandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_2_CmpB_IrqHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_2_CmpA_IrqHandler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_1_CmpB_IrqHandler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_1_CmpA_IrqHandler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_IrqHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStamp1_IrqHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStamp0_IrqHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_WakeupTimer_IrqHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStop_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ132_Handler</STRONG> (Thumb, 864 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ132_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ132_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GUdf_IrqHandler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GOvf_IrqHandler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpF_IrqHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpE_IrqHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpD_IrqHandler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpC_IrqHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpB_IrqHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpA_IrqHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GUdf_IrqHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GOvf_IrqHandler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpF_IrqHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpE_IrqHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpD_IrqHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpC_IrqHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpB_IrqHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpA_IrqHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_Udf_IrqHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_Ovf_IrqHandler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpWL_IrqHandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpWH_IrqHandler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpVL_IrqHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpVH_IrqHandler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpUL_IrqHandler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpUH_IrqHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_Udf_IrqHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_Ovf_IrqHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpWL_IrqHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpWH_IrqHandler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpVL_IrqHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpVH_IrqHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpUL_IrqHandler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpUH_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ133_Handler</STRONG> (Thumb, 862 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ133_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ133_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GUdf_IrqHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GOvf_IrqHandler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpF_IrqHandler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpE_IrqHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpD_IrqHandler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpC_IrqHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpB_IrqHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpA_IrqHandler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpUpB_IrqHandler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpUpA_IrqHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpDownB_IrqHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpDownA_IrqHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GDte_IrqHandler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpUpB_IrqHandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpUpA_IrqHandler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpDownB_IrqHandler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpDownA_IrqHandler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GDte_IrqHandler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_Udf_IrqHandler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_Ovf_IrqHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpWL_IrqHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpWH_IrqHandler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpVL_IrqHandler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpVH_IrqHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpUL_IrqHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpUH_IrqHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadW_IrqHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadV_IrqHandler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadU_IrqHandler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadW_IrqHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadV_IrqHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadU_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ134_Handler</STRONG> (Thumb, 584 bytes, Stack size 8 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ134_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ134_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpUpB_IrqHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpUpA_IrqHandler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpDownB_IrqHandler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_SCmpDownA_IrqHandler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_Gdte_IrqHandler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GUdf_IrqHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GOvf_IrqHandler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpF_IrqHandler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpE_IrqHandler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpD_IrqHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpC_IrqHandler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpB_IrqHandler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_4_GCmpA_IrqHandler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpUpB_IrqHandler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpUpA_IrqHandler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpDownB_IrqHandler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpDownA_IrqHandler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GDte_IrqHandler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadW_IrqHandler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadV_IrqHandler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadU_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ135_Handler</STRONG> (Thumb, 860 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ135_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ135_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Udf_IrqHandler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Ovf_IrqHandler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Cmp_IrqHandler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Udf_IrqHandler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Ovf_IrqHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Cmp_IrqHandler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpUpB_IrqHandler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpUpA_IrqHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpDownB_IrqHandler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_SCmpDownA_IrqHandler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_Gdte_IrqHandler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GUdf_IrqHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GOvf_IrqHandler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpF_IrqHandler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpE_IrqHandler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpD_IrqHandler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpC_IrqHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpB_IrqHandler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_6_GCmpA_IrqHandler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpUpB_IrqHandler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpUpA_IrqHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpDownB_IrqHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_SCmpDownA_IrqHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_Gdte_IrqHandler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GUdf_IrqHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GOvf_IrqHandler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpF_IrqHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpE_IrqHandler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpD_IrqHandler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpC_IrqHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpB_IrqHandler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_5_GCmpA_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ136_Handler</STRONG> (Thumb, 864 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ136_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ136_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Udf_IrqHandler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Ovf_IrqHandler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Cmp_IrqHandler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Udf_IrqHandler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Ovf_IrqHandler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Cmp_IrqHandler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpUpB_IrqHandler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpUpA_IrqHandler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpDownB_IrqHandler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_SCmpDownA_IrqHandler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_Gdte_IrqHandler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GUdf_IrqHandler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GOvf_IrqHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpF_IrqHandler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpE_IrqHandler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpD_IrqHandler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpC_IrqHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpB_IrqHandler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_8_GCmpA_IrqHandler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpUpB_IrqHandler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpUpA_IrqHandler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpDownB_IrqHandler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_SCmpDownA_IrqHandler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_Gdte_IrqHandler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GUdf_IrqHandler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GOvf_IrqHandler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpF_IrqHandler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpE_IrqHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpD_IrqHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpC_IrqHandler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpB_IrqHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_7_GCmpA_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ137_Handler</STRONG> (Thumb, 622 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ137_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ137_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_TxEmpty_IrqHandler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_TxComplete_IrqHandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxTO_IrqHandler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxFull_IrqHandler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxError_IrqHandler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxEmpty_IrqHandler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxComplete_IrqHandler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTO_IrqHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxFull_IrqHandler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxError_IrqHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_TxEmpty_IrqHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RxFull_IrqHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Idle_IrqHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Error_IrqHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TxEmpty_IrqHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_RxFull_IrqHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Idle_IrqHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Error_IrqHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR6_IrqHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR5_IrqHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR4_IrqHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR3_IrqHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR2_IrqHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR1_IrqHandler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR0_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ138_Handler</STRONG> (Thumb, 784 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ138_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ138_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_TxEmpty_IrqHandler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_TxComplete_IrqHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxFull_IrqHandler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxError_IrqHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TxEmpty_IrqHandler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TxComplete_IrqHandler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxFull_IrqHandler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxError_IrqHandler
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Udf_IrqHandler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Ovf_IrqHandler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_8_Cmp_IrqHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Udf_IrqHandler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Ovf_IrqHandler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_7_Cmp_IrqHandler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Udf_IrqHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Ovf_IrqHandler
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Cmp_IrqHandler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Udf_IrqHandler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Ovf_IrqHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Cmp_IrqHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_TxEmpty_IrqHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_RxFull_IrqHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Idle_IrqHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Error_IrqHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TxEmpty_IrqHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_RxFull_IrqHandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Idle_IrqHandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Error_IrqHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IrqHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ139_Handler</STRONG> (Thumb, 706 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ139_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ139_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TxEmpty_IrqHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TxComplete_IrqHandler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxTO_IrqHandler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxFull_IrqHandler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxError_IrqHandler
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_TxEmpty_IrqHandler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_TxComplete_IrqHandler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_RxFull_IrqHandler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_RxError_IrqHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_LinWakeup_IrqHandler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_LinBreakField_IrqHandler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Udf_IrqHandler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Ovf_IrqHandler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_9_Cmp_IrqHandler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Udf_IrqHandler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Ovf_IrqHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_12_Cmp_IrqHandler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Udf_IrqHandler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Ovf_IrqHandler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_11_Cmp_IrqHandler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Udf_IrqHandler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Ovf_IrqHandler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_10_Cmp_IrqHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_TxEmpty_IrqHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_RxFull_IrqHandler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_Idle_IrqHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_Error_IrqHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_TxEmpty_IrqHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_RxFull_IrqHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_Idle_IrqHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_Error_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ140_Handler</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ140_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ140_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_Global_IrqHandler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART8_TxEmpty_IrqHandler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART8_TxComplete_IrqHandler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART8_RxFull_IrqHandler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART8_RxError_IrqHandler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_TxEmpty_IrqHandler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_TxComplete_IrqHandler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxTO_IrqHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxFull_IrqHandler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxError_IrqHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC2_Normal_IrqHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC2_Error_IrqHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC1_Normal_IrqHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC1_Error_IrqHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Tx_IrqHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Rx_IrqHandler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Error_IrqHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S1_Tx_IrqHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S1_Rx_IrqHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S1_Error_IrqHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Wakeup_IrqHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Global_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ141_Handler</STRONG> (Thumb, 666 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ141_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ141_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART9_TxEmpty_IrqHandler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART9_TxComplete_IrqHandler
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART9_RxFull_IrqHandler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART9_RxError_IrqHandler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_TxEmpty_IrqHandler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_TxComplete_IrqHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_RxFull_IrqHandler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_RxError_IrqHandler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_LinWakeup_IrqHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_LinBreakField_IrqHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Tx_IrqHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Rx_IrqHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Error_IrqHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_Tx_IrqHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_Rx_IrqHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_Error_IrqHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_TxEmpty_IrqHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_TxComplete_IrqHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_RxFull_IrqHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EE_IrqHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_TxEmpty_IrqHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_TxComplete_IrqHandler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_RxFull_IrqHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EE_IrqHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_TxEmpty_IrqHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_TxComplete_IrqHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_RxFull_IrqHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EE_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ142_Handler</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ142_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ142_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IrqHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_LVD2_IrqHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_LVD1_IrqHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C6_TxEmpty_IrqHandler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C6_TxComplete_IrqHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C6_RxFull_IrqHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C6_EE_IrqHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_TxEmpty_IrqHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_TxComplete_IrqHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_RxFull_IrqHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_EE_IrqHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_TxEmpty_IrqHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_TxComplete_IrqHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_RxFull_IrqHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_EE_IrqHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Ovf_IrqHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Error_IrqHandler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_End_IrqHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC_Udf_IrqHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTC_Ovf_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ143_Handler</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, hc32f4a0_ll_interrupts_share.o(i.IRQ143_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ143_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_IrqHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_SeqB_IrqHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_SeqA_IrqHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_CmpComb_IrqHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Cmp1_IrqHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Cmp0_IrqHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_SeqB_IrqHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_SeqA_IrqHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_CmpComb_IrqHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Cmp1_IrqHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Cmp0_IrqHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SeqB_IrqHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SeqA_IrqHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_CmpComb_IrqHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmp1_IrqHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmp0_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[374]"></a>LL_PERIPH_WE</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hc32_ll.o(i.LL_PERIPH_WE))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[2a7]"></a>LL_PERIPH_WP</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hc32_ll.o(i.LL_PERIPH_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_PERIPH_WP
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[142]"></a>MAU_Sqrt_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.MAU_Sqrt_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[143]"></a>NFC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.NFC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[2a9]"></a>Norflash_Erase_Sector</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, w25qxx.o(i.Norflash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Norflash_Erase_Sector &rArr; Norflash_Wait_Busy &rArr; Norflash_ReadSR &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_Enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write
</UL>

<P><STRONG><a name="[2ad]"></a>Norflash_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w25qxx.o(i.Norflash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Norflash_Init &rArr; spi1_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[2b0]"></a>Norflash_Read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w25qxx.o(i.Norflash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Norflash_Read &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[2af]"></a>Norflash_ReadID</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, w25qxx.o(i.Norflash_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Norflash_ReadID &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Init
</UL>

<P><STRONG><a name="[2b1]"></a>Norflash_ReadSR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(i.Norflash_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Norflash_ReadSR &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Wait_Busy
</UL>

<P><STRONG><a name="[2ab]"></a>Norflash_Wait_Busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25qxx.o(i.Norflash_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Norflash_Wait_Busy &rArr; Norflash_ReadSR &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_Page
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Erase_Sector
</UL>

<P><STRONG><a name="[2b2]"></a>Norflash_Write</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, w25qxx.o(i.Norflash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Norflash_Write &rArr; Norflash_Write_NoCheck &rArr; Norflash_Write_Page &rArr; Norflash_Wait_Busy &rArr; Norflash_ReadSR &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_NoCheck
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Read
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[2aa]"></a>Norflash_Write_Enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w25qxx.o(i.Norflash_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Norflash_Write_Enable &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_Page
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Erase_Sector
</UL>

<P><STRONG><a name="[2b4]"></a>Norflash_Write_NoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, w25qxx.o(i.Norflash_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Norflash_Write_NoCheck &rArr; Norflash_Write_Page &rArr; Norflash_Wait_Busy &rArr; Norflash_ReadSR &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write
</UL>

<P><STRONG><a name="[2b6]"></a>Norflash_Write_Page</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w25qxx.o(i.Norflash_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Norflash_Write_Page &rArr; Norflash_Wait_Busy &rArr; Norflash_ReadSR &rArr; SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_Enable
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_NoCheck
</UL>

<P><STRONG><a name="[2ba]"></a>OTS_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hc32_ll_ots.o(i.OTS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OTS_Init &rArr; OTS_GetDfltPara &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_GetDfltPara
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtsInit
</UL>

<P><STRONG><a name="[2bc]"></a>OTS_StructInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32_ll_ots.o(i.OTS_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtsInit
</UL>

<P><STRONG><a name="[2bb]"></a>OtsInit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ots.o(i.OtsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = OtsInit &rArr; OTS_Init &rArr; OTS_GetDfltPara &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_LrcCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_StructInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bd]"></a>PWC_BKR_PowerCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc32_ll_pwc.o(i.PWC_BKR_PowerCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWC_BKR_PowerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[2be]"></a>PWC_BKR_Read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32_ll_pwc.o(i.PWC_BKR_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWC_BKR_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[2bf]"></a>PWC_BKR_Write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hc32_ll_pwc.o(i.PWC_BKR_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_BKR_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[144]"></a>PWC_LVD1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.PWC_LVD1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[145]"></a>PWC_LVD2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.PWC_LVD2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[2c0]"></a>PWC_VBAT_PowerCmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32_ll_pwc.o(i.PWC_VBAT_PowerCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWC_VBAT_PowerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[2c1]"></a>PWC_VBAT_Reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hc32_ll_pwc.o(i.PWC_VBAT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWC_VBAT_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[146]"></a>PWC_WakeupTimer_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.PWC_WakeupTimer_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[147]"></a>QSPI_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.QSPI_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[25a]"></a>RTC_Alarm_IrqHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.RTC_Alarm_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_Alarm_IrqHandler &rArr; sw24Hour &rArr; setDataTime &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearStatus
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[2c2]"></a>RTC_ClearStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc32_ll_rtc.o(i.RTC_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Period_IrqHandler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IrqHandler
</UL>

<P><STRONG><a name="[2c4]"></a>RTC_Cmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hc32_ll_rtc.o(i.RTC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[2c5]"></a>RTC_Config</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, rtc.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_Config &rArr; setDataTime &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_VBAT_Reset
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_VBAT_PowerCmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_Write
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_Read
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_PowerCmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StructInit
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataTime
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_ShareIrqCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c6]"></a>RTC_DeInit</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, hc32_ll_rtc.o(i.RTC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[2cc]"></a>RTC_EnterRwMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hc32_ll_rtc.o(i.RTC_EnterRwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[2cd]"></a>RTC_ExitRwMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hc32_ll_rtc.o(i.RTC_ExitRwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ExitRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[2ca]"></a>RTC_GetAlarm</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hc32_ll_rtc.o(i.RTC_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
</UL>

<P><STRONG><a name="[2cb]"></a>RTC_GetDate</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hc32_ll_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_GetDate &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTime
</UL>

<P><STRONG><a name="[2ce]"></a>RTC_GetTime</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, hc32_ll_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_GetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTime
</UL>

<P><STRONG><a name="[2c8]"></a>RTC_Init</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, hc32_ll_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[25b]"></a>RTC_Period_IrqHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.RTC_Period_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_Period_IrqHandler &rArr; sw12Hour &rArr; setDataTime &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearStatus
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[2d0]"></a>RTC_SetAlarm</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, hc32_ll_rtc.o(i.RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
</UL>

<P><STRONG><a name="[2d1]"></a>RTC_SetDate</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, hc32_ll_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataTime
</UL>

<P><STRONG><a name="[2d2]"></a>RTC_SetTime</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, hc32_ll_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataTime
</UL>

<P><STRONG><a name="[2c7]"></a>RTC_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32_ll_rtc.o(i.RTC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[148]"></a>RTC_TimeStamp0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.RTC_TimeStamp0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[149]"></a>RTC_TimeStamp1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.RTC_TimeStamp1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[14a]"></a>SDIOC1_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SDIOC1_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[14b]"></a>SDIOC1_Normal_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SDIOC1_Normal_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[14c]"></a>SDIOC2_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SDIOC2_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[14d]"></a>SDIOC2_Normal_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SDIOC2_Normal_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[2ef]"></a>SDIOC_ClearIntStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_ClearIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>

<P><STRONG><a name="[2f0]"></a>SDIOC_ClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_ClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_ClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
</UL>

<P><STRONG><a name="[2f1]"></a>SDIOC_ConfigData</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDIOC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetSpeedMode
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSCR
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[2f2]"></a>SDIOC_GetHostStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_GetHostStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_GetHostStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1Busy
</UL>

<P><STRONG><a name="[2f3]"></a>SDIOC_GetIntEnableState</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_GetIntEnableState), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_GetIntEnableState
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
</UL>

<P><STRONG><a name="[2f4]"></a>SDIOC_GetIntStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>

<P><STRONG><a name="[2f5]"></a>SDIOC_GetMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_GetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_GetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD8_SendInterfaceCond
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD6_SwitchFunc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD3_SendRelativeAddr
</UL>

<P><STRONG><a name="[325]"></a>SDIOC_GetOptimumClockDiv</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, hc32_ll_sdioc.o(i.SDIOC_GetOptimumClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIOC_GetOptimumClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[2f6]"></a>SDIOC_GetPowerState</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_GetPowerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_GetPowerState
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2f7]"></a>SDIOC_GetResponse</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDIOC_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCurrCardStatus
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1Busy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[2f8]"></a>SDIOC_Init</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDIOC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[2f9]"></a>SDIOC_IntCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_IntCmd), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
</UL>

<P><STRONG><a name="[2fa]"></a>SDIOC_PowerCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_PowerCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_PowerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[2fb]"></a>SDIOC_ReadBuffer</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hc32_ll_sdioc.o(i.SDIOC_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIOC_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
</UL>

<P><STRONG><a name="[2fc]"></a>SDIOC_SWReset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDIOC_SWReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_SWReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[2fd]"></a>SDIOC_SendCommand</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD9_SendCSD
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD8_SendInterfaceCond
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD7_SelectDeselectCard
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD6_SwitchFunc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD55_AppCmd
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD3_SendRelativeAddr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD2_AllSendCID
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD25_WriteMultipleBlock
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD24_WriteSingleBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD18_ReadMultipleBlock
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD17_ReadSingleBlock
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD16_SetBlockLength
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD13_SendStatus
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD12_StopTrans
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD0_GoIdleState
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD6_SetBusWidth
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD51_SendSCR
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD41_SendOperateCond
</UL>

<P><STRONG><a name="[2fe]"></a>SDIOC_SetBusWidth</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_SetBusWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBusWidth
</UL>

<P><STRONG><a name="[2ff]"></a>SDIOC_SetClockDiv</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_SetClockDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetSpeedMode
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[300]"></a>SDIOC_SetSpeedMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDIOC_SetSpeedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_SetSpeedMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetSpeedMode
</UL>

<P><STRONG><a name="[324]"></a>SDIOC_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32_ll_sdioc.o(i.SDIOC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[301]"></a>SDIOC_VerifyClockDiv</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDIOC_VerifyClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_VerifyClockDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[302]"></a>SDIOC_WriteBuffer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDIOC_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
</UL>

<P><STRONG><a name="[303]"></a>SDMMC_ACMD41_SendOperateCond</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_ACMD41_SendOperateCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_ACMD41_SendOperateCond &rArr; SDMMC_GetCmdResp3 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
</UL>

<P><STRONG><a name="[305]"></a>SDMMC_ACMD51_SendSCR</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_ACMD51_SendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_ACMD51_SendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSCR
</UL>

<P><STRONG><a name="[307]"></a>SDMMC_ACMD6_SetBusWidth</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_ACMD6_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_ACMD6_SetBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBusWidth
</UL>

<P><STRONG><a name="[308]"></a>SDMMC_CMD0_GoIdleState</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD0_GoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDMMC_CMD0_GoIdleState &rArr; SDMMC_GetCmdError &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
</UL>

<P><STRONG><a name="[30a]"></a>SDMMC_CMD12_StopTrans</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD12_StopTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
</UL>

<P><STRONG><a name="[30c]"></a>SDMMC_CMD13_SendStatus</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD13_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_CMD13_SendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCurrCardStatus
</UL>

<P><STRONG><a name="[30d]"></a>SDMMC_CMD16_SetBlockLength</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD16_SetBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_CMD16_SetBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetSpeedMode
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSCR
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[30e]"></a>SDMMC_CMD17_ReadSingleBlock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD17_ReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_CMD17_ReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[30f]"></a>SDMMC_CMD18_ReadMultipleBlock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD18_ReadMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_CMD18_ReadMultipleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[310]"></a>SDMMC_CMD24_WriteSingleBlock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD24_WriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_CMD24_WriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
</UL>

<P><STRONG><a name="[311]"></a>SDMMC_CMD25_WriteMultipleBlock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD25_WriteMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_CMD25_WriteMultipleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
</UL>

<P><STRONG><a name="[312]"></a>SDMMC_CMD2_AllSendCID</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD2_AllSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CMD2_AllSendCID &rArr; SDMMC_GetCmdResp2 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[314]"></a>SDMMC_CMD3_SendRelativeAddr</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD3_SendRelativeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_CMD3_SendRelativeAddr &rArr; SDMMC_GetCmdResp6 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetMode
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[316]"></a>SDMMC_CMD55_AppCmd</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD55_AppCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_CMD55_AppCmd &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBusWidth
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSCR
</UL>

<P><STRONG><a name="[317]"></a>SDMMC_CMD6_SwitchFunc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD6_SwitchFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDMMC_CMD6_SwitchFunc &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetMode
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1Busy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetSpeedMode
</UL>

<P><STRONG><a name="[318]"></a>SDMMC_CMD7_SelectDeselectCard</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD7_SelectDeselectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_CMD7_SelectDeselectCard &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[319]"></a>SDMMC_CMD8_SendInterfaceCond</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD8_SendInterfaceCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_CMD8_SendInterfaceCond &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetMode
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
</UL>

<P><STRONG><a name="[31b]"></a>SDMMC_CMD9_SendCSD</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_CMD9_SendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_CMD9_SendCSD &rArr; SDMMC_GetCmdResp2 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[320]"></a>SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sd.o(i.SD_ErrorCallback), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
</UL>

<P><STRONG><a name="[33e]"></a>SD_GetCardCID</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sd.o(i.SD_GetCardCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_GetCardCID
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[33d]"></a>SD_GetCardCSD</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, sd.o(i.SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[33f]"></a>SD_GetCardInfo</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sd.o(i.SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[2ee]"></a>SD_GetCardState</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sd.o(i.SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_GetCardState &rArr; SD_GetCurrCardStatus &rArr; SDMMC_CMD13_SendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCurrCardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_GetCardTransState
</UL>

<P><STRONG><a name="[25c]"></a>SD_IRQHandler</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, sd.o(i.SD_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SD_IRQHandler &rArr; SD_GetCardState &rArr; SD_GetCurrCardStatus &rArr; SDMMC_CMD13_SendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChCmd
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_TxCompleteCallback
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RxCompleteCallback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ErrorCallback
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardState
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD12_StopTrans
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_WriteBuffer
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_IntCmd
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetIntStatus
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetIntEnableState
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetHostStatus
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearIntStatus
</UL>

<P><STRONG><a name="[323]"></a>SD_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, sd.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayMS
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetSpeedMode
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBusWidth
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerCmd
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSCR
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_VerifyClockDiv
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_StructInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_PowerCmd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetOptimumClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[32c]"></a>SD_Initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[363]"></a>SD_Ioctl</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_Ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[32f]"></a>SD_Read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[330]"></a>SD_ReadBlocks</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, sd.o(i.SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD18_ReadMultipleBlock
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD17_ReadSingleBlock
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD16_SetBlockLength
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[322]"></a>SD_RxCompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sd.o(i.SD_RxCompleteCallback), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
</UL>

<P><STRONG><a name="[32e]"></a>SD_Status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_Status &rArr; SDCard_GetCardTransState &rArr; SD_GetCardState &rArr; SD_GetCurrCardStatus &rArr; SDMMC_CMD13_SendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCard_GetCardTransState
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[321]"></a>SD_TxCompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sd.o(i.SD_TxCompleteCallback), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IRQHandler
</UL>

<P><STRONG><a name="[331]"></a>SD_Write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[332]"></a>SD_WriteBlocks</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, sd.o(i.SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD25_WriteMultipleBlock
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD24_WriteSingleBlock
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD16_SetBlockLength
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>

<P><STRONG><a name="[14e]"></a>SPI1_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI1_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[14f]"></a>SPI1_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI1_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[2ac]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPI1_ReadWriteByte &rArr; SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_Page
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write_Enable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_ReadSR
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_ReadID
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Read
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Erase_Sector
</UL>

<P><STRONG><a name="[150]"></a>SPI1_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI1_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[151]"></a>SPI1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[152]"></a>SPI2_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI2_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[153]"></a>SPI2_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI2_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[154]"></a>SPI2_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI2_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[155]"></a>SPI2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[156]"></a>SPI3_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI3_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[157]"></a>SPI3_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI3_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[158]"></a>SPI3_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI3_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[159]"></a>SPI3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[15a]"></a>SPI4_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI4_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[15b]"></a>SPI4_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI4_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[15c]"></a>SPI4_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI4_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[15d]"></a>SPI4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[15e]"></a>SPI5_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI5_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[15f]"></a>SPI5_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI5_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[160]"></a>SPI5_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI5_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[161]"></a>SPI5_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI5_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[162]"></a>SPI6_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI6_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[163]"></a>SPI6_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI6_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[164]"></a>SPI6_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI6_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[165]"></a>SPI6_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SPI6_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[334]"></a>SPI_Cmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>

<P><STRONG><a name="[335]"></a>SPI_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hc32_ll_spi.o(i.SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>

<P><STRONG><a name="[384]"></a>SPI_DelayStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32_ll_spi.o(i.SPI_DelayStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>

<P><STRONG><a name="[336]"></a>SPI_DelayTimeConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_DelayTimeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DelayTimeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>

<P><STRONG><a name="[337]"></a>SPI_Init</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, hc32_ll_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>

<P><STRONG><a name="[383]"></a>SPI_StructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32_ll_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>

<P><STRONG><a name="[333]"></a>SPI_TransReceive</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_TransReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPI_TransReceive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[33a]"></a>SRAM_SetWaitCycle</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, hc32_ll_sram.o(i.SRAM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
</UL>

<P><STRONG><a name="[166]"></a>SWDT_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.SWDT_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[32d]"></a>SdCard_Config</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, sd_diskio.o(i.SdCard_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardCSD
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardCID
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSdCardInsertState
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClockDiv
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SWReset
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[28f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, system_hc32f4a0.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9d]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, system_hc32f4a0.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(.text)
</UL>
<P><STRONG><a name="[167]"></a>TMR0_1_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR0_1_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[168]"></a>TMR0_1_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR0_1_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[169]"></a>TMR0_2_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR0_2_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[16a]"></a>TMR0_2_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR0_2_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[29a]"></a>TMR0_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, hc32_ll_tmr0.o(i.TMR0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTimer_Tmr0Unit2CHB_Init
</UL>

<P><STRONG><a name="[299]"></a>TMR0_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32_ll_tmr0.o(i.TMR0_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTimer_Tmr0Unit2CHB_Init
</UL>

<P><STRONG><a name="[16b]"></a>TMR2_1_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_1_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[16c]"></a>TMR2_1_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_1_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[16d]"></a>TMR2_1_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_1_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[16e]"></a>TMR2_1_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_1_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[16f]"></a>TMR2_2_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_2_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[170]"></a>TMR2_2_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_2_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[171]"></a>TMR2_2_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_2_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[172]"></a>TMR2_2_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_2_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[173]"></a>TMR2_3_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_3_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[174]"></a>TMR2_3_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_3_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[175]"></a>TMR2_3_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_3_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[176]"></a>TMR2_3_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_3_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[177]"></a>TMR2_4_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_4_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[178]"></a>TMR2_4_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_4_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[179]"></a>TMR2_4_OvfA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_4_OvfA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[17a]"></a>TMR2_4_OvfB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR2_4_OvfB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[17b]"></a>TMR4_1_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[17c]"></a>TMR4_1_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[17d]"></a>TMR4_1_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[17e]"></a>TMR4_1_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[17f]"></a>TMR4_1_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[180]"></a>TMR4_1_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[181]"></a>TMR4_1_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[182]"></a>TMR4_1_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[183]"></a>TMR4_1_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[184]"></a>TMR4_1_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[185]"></a>TMR4_1_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_1_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[186]"></a>TMR4_2_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[187]"></a>TMR4_2_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[188]"></a>TMR4_2_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[189]"></a>TMR4_2_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[18a]"></a>TMR4_2_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[18b]"></a>TMR4_2_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[18c]"></a>TMR4_2_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[18d]"></a>TMR4_2_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[18e]"></a>TMR4_2_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[18f]"></a>TMR4_2_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[190]"></a>TMR4_2_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_2_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[191]"></a>TMR4_3_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[192]"></a>TMR4_3_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[193]"></a>TMR4_3_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[194]"></a>TMR4_3_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[195]"></a>TMR4_3_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[196]"></a>TMR4_3_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[197]"></a>TMR4_3_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[198]"></a>TMR4_3_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[199]"></a>TMR4_3_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[19a]"></a>TMR4_3_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[19b]"></a>TMR4_3_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR4_3_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[19c]"></a>TMR6_1_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[19d]"></a>TMR6_1_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[19e]"></a>TMR6_1_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[19f]"></a>TMR6_1_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1a0]"></a>TMR6_1_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>TMR6_1_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1a2]"></a>TMR6_1_GDte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GDte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1a3]"></a>TMR6_1_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1a4]"></a>TMR6_1_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1a5]"></a>TMR6_1_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1a6]"></a>TMR6_1_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1a7]"></a>TMR6_1_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1a8]"></a>TMR6_1_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_1_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1a9]"></a>TMR6_2_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1aa]"></a>TMR6_2_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1ab]"></a>TMR6_2_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1ac]"></a>TMR6_2_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1ad]"></a>TMR6_2_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1ae]"></a>TMR6_2_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1af]"></a>TMR6_2_GDte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GDte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b0]"></a>TMR6_2_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b1]"></a>TMR6_2_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[1b2]"></a>TMR6_2_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>TMR6_2_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b4]"></a>TMR6_2_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b5]"></a>TMR6_2_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_2_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b6]"></a>TMR6_3_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b7]"></a>TMR6_3_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b8]"></a>TMR6_3_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1b9]"></a>TMR6_3_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1ba]"></a>TMR6_3_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1bb]"></a>TMR6_3_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>TMR6_3_GDte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GDte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1bd]"></a>TMR6_3_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1be]"></a>TMR6_3_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>

<P><STRONG><a name="[1bf]"></a>TMR6_3_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c0]"></a>TMR6_3_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c1]"></a>TMR6_3_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c2]"></a>TMR6_3_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_3_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c3]"></a>TMR6_4_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>TMR6_4_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c5]"></a>TMR6_4_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c6]"></a>TMR6_4_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c7]"></a>TMR6_4_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c8]"></a>TMR6_4_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1c9]"></a>TMR6_4_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>TMR6_4_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1cb]"></a>TMR6_4_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1cc]"></a>TMR6_4_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1cd]"></a>TMR6_4_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1ce]"></a>TMR6_4_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1cf]"></a>TMR6_4_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_4_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ134_Handler
</UL>

<P><STRONG><a name="[1d0]"></a>TMR6_5_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d1]"></a>TMR6_5_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d2]"></a>TMR6_5_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d3]"></a>TMR6_5_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>TMR6_5_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d5]"></a>TMR6_5_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d6]"></a>TMR6_5_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d7]"></a>TMR6_5_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d8]"></a>TMR6_5_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1d9]"></a>TMR6_5_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1da]"></a>TMR6_5_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1db]"></a>TMR6_5_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1dc]"></a>TMR6_5_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_5_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1dd]"></a>TMR6_6_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1de]"></a>TMR6_6_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1df]"></a>TMR6_6_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e0]"></a>TMR6_6_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e1]"></a>TMR6_6_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e2]"></a>TMR6_6_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e3]"></a>TMR6_6_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e4]"></a>TMR6_6_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e5]"></a>TMR6_6_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e6]"></a>TMR6_6_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e7]"></a>TMR6_6_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e8]"></a>TMR6_6_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1e9]"></a>TMR6_6_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_6_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[1ea]"></a>TMR6_7_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1eb]"></a>TMR6_7_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1ec]"></a>TMR6_7_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1ed]"></a>TMR6_7_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1ee]"></a>TMR6_7_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1ef]"></a>TMR6_7_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f0]"></a>TMR6_7_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f1]"></a>TMR6_7_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f2]"></a>TMR6_7_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f3]"></a>TMR6_7_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f4]"></a>TMR6_7_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f5]"></a>TMR6_7_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>TMR6_7_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_7_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f7]"></a>TMR6_8_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f8]"></a>TMR6_8_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1f9]"></a>TMR6_8_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1fa]"></a>TMR6_8_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1fb]"></a>TMR6_8_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1fc]"></a>TMR6_8_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1fd]"></a>TMR6_8_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1fe]"></a>TMR6_8_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1ff]"></a>TMR6_8_Gdte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_Gdte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[200]"></a>TMR6_8_SCmpDownA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_SCmpDownA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[201]"></a>TMR6_8_SCmpDownB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_SCmpDownB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[202]"></a>TMR6_8_SCmpUpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_SCmpUpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[203]"></a>TMR6_8_SCmpUpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMR6_8_SCmpUpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[204]"></a>TMRA_10_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_10_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[205]"></a>TMRA_10_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_10_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[206]"></a>TMRA_10_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_10_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[207]"></a>TMRA_11_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_11_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[208]"></a>TMRA_11_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_11_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[209]"></a>TMRA_11_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_11_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[20a]"></a>TMRA_12_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_12_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[20b]"></a>TMRA_12_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_12_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[20c]"></a>TMRA_12_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_12_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[20d]"></a>TMRA_1_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_1_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20e]"></a>TMRA_1_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_1_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[20f]"></a>TMRA_1_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_1_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[210]"></a>TMRA_2_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_2_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[211]"></a>TMRA_2_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_2_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[212]"></a>TMRA_2_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_2_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ135_Handler
</UL>

<P><STRONG><a name="[213]"></a>TMRA_3_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_3_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[214]"></a>TMRA_3_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_3_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[215]"></a>TMRA_3_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_3_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[216]"></a>TMRA_4_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_4_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[217]"></a>TMRA_4_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_4_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[218]"></a>TMRA_4_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_4_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[219]"></a>TMRA_5_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_5_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[21a]"></a>TMRA_5_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_5_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[21b]"></a>TMRA_5_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_5_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[21c]"></a>TMRA_6_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_6_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[21d]"></a>TMRA_6_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_6_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[21e]"></a>TMRA_6_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_6_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[21f]"></a>TMRA_7_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_7_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[220]"></a>TMRA_7_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_7_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[221]"></a>TMRA_7_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_7_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[222]"></a>TMRA_8_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_8_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[223]"></a>TMRA_8_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_8_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[224]"></a>TMRA_8_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_8_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[225]"></a>TMRA_9_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_9_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[226]"></a>TMRA_9_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_9_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[227]"></a>TMRA_9_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.TMRA_9_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[228]"></a>USART10_LinBreakField_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART10_LinBreakField_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[229]"></a>USART10_LinWakeup_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART10_LinWakeup_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[22a]"></a>USART10_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART10_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[22b]"></a>USART10_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART10_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[22c]"></a>USART10_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART10_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[22d]"></a>USART10_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART10_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[22e]"></a>USART1_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART1_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[22f]"></a>USART1_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART1_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[230]"></a>USART1_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART1_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[231]"></a>USART1_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART1_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[232]"></a>USART1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[233]"></a>USART2_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART2_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[234]"></a>USART2_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART2_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[235]"></a>USART2_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART2_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[236]"></a>USART2_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART2_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[237]"></a>USART2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[238]"></a>USART3_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART3_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[239]"></a>USART3_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART3_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[23a]"></a>USART3_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART3_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[23b]"></a>USART3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[23c]"></a>USART4_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART4_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[23d]"></a>USART4_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART4_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[23e]"></a>USART4_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART4_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[23f]"></a>USART4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[240]"></a>USART5_LinBreakField_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART5_LinBreakField_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[241]"></a>USART5_LinWakeup_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART5_LinWakeup_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[242]"></a>USART5_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART5_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[243]"></a>USART5_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART5_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[244]"></a>USART5_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART5_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[245]"></a>USART5_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART5_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[246]"></a>USART6_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART6_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[247]"></a>USART6_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART6_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[248]"></a>USART6_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART6_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[249]"></a>USART6_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART6_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[24a]"></a>USART6_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART6_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[24b]"></a>USART7_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART7_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[24c]"></a>USART7_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART7_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[24d]"></a>USART7_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART7_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[24e]"></a>USART7_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART7_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[24f]"></a>USART7_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART7_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[250]"></a>USART8_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART8_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[251]"></a>USART8_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART8_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[252]"></a>USART8_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART8_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[253]"></a>USART8_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART8_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[254]"></a>USART9_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART9_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[255]"></a>USART9_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART9_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[256]"></a>USART9_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART9_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[257]"></a>USART9_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USART9_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[342]"></a>USART_FuncCmd</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, hc32_ll_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[345]"></a>USART_SetBaudrate</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, hc32_ll_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
</UL>

<P><STRONG><a name="[346]"></a>USART_UART_Init</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, hc32_ll_usart.o(i.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[388]"></a>USART_UART_StructInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32_ll_usart.o(i.USART_UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[25d]"></a>USBD_IRQHandler</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, usb_dc_dwc2.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_ep_read
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_tx_fifo_empty_procecss
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_set_turnaroundtime
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_get_devspeed
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_flush_txfifo
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_flush_rxfifo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_ep0_start_read_setup
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_suspend_handler
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_resume_handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQ_Handler
</UL>

<P><STRONG><a name="[258]"></a>USBFS_Global_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.USBFS_Global_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[a1]"></a>USB_IRQ_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msc_storage.o(i.USB_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USB_IRQ_Handler &rArr; USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msc_storage.o(i.usb_dc_low_level_init)
</UL>
<P><STRONG><a name="[259]"></a>WDT_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f4a0_ll_interrupts_share.o(i.WDT_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[34f]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3bc]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2d4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request_handler
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_print_setup
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_set_txfifo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_class_interface_request_handler
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write12
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write10
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read12
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read10
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[3bd]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3be]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3bf]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3c0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3c1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[376]"></a>delay_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay_systick.o(i.delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[360]"></a>delay_ms</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, delay_systick.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dwc2_delay_ms
</UL>

<P><STRONG><a name="[33c]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay_systick.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
</UL>

<P><STRONG><a name="[361]"></a>delay_xms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay_systick.o(i.delay_xms))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[362]"></a>disk_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[35c]"></a>disk_ioctl</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[364]"></a>disk_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = disk_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[365]"></a>disk_status</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disk_status &rArr; SD_Status &rArr; SDCard_GetCardTransState &rArr; SD_GetCardState &rArr; SD_GetCurrCardStatus &rArr; SDMMC_CMD13_SendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[35f]"></a>disk_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = disk_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[347]"></a>dwc2_ep_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_dc_dwc2.o(i.dwc2_ep_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dwc2_ep_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[367]"></a>dwc2_ep_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dc_dwc2.o(i.dwc2_ep_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dwc2_ep_write
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_tx_fifo_empty_procecss
</UL>

<P><STRONG><a name="[368]"></a>f_getfree</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_getfree &rArr; mount_volume &rArr; disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_FreeDiskSpace
</UL>

<P><STRONG><a name="[36b]"></a>f_mkfs</STRONG> (Thumb, 1666 bytes, Stack size 120 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = f_mkfs &rArr; disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[370]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = f_mount &rArr; mount_volume &rArr; disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36d]"></a>ff_memalloc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diskio.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ff_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[36e]"></a>ff_memfree</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diskio.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_memfree &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[9f]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart1.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[372]"></a>getDataTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtc.o(i.getDataTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getDataTime &rArr; RTC_GetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
</UL>

<P><STRONG><a name="[373]"></a>get_FreeDiskSpace</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, exfatfs.o(i.get_FreeDiskSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = get_FreeDiskSpace &rArr; f_getfree &rArr; mount_volume &rArr; disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36f]"></a>get_fattime</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, diskio.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[9c]"></a>main</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = main &rArr; f_mkfs &rArr; disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePins
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemClockConfig240MHZ
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_FreeDiskSpace
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountTimer_Tmr0Unit2CHB_Init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtsInit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a7]"></a>mass_storage_bulk_in</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usbd_msc.o(i.mass_storage_bulk_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mass_storage_bulk_in &rArr; SCSI_processRead &rArr; usbd_msc_sector_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[a6]"></a>mass_storage_bulk_out</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_msc.o(i.mass_storage_bulk_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mass_storage_bulk_out &rArr; SCSI_CBWDecode &rArr; SCSI_read12 &rArr; SCSI_processRead &rArr; usbd_msc_sector_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_bot_abort
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[378]"></a>msc_storage_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msc_storage.o(i.msc_storage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = msc_storage_init &rArr; usbd_initialize &rArr; usb_dc_init &rArr; usb_dc_low_level_init &rArr; CLK_SetUSBClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_desc_register
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>msc_storage_notify_handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_msc.o(i.msc_storage_notify_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msc_storage_notify_handler &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_reset
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[381]"></a>my_mem_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[0]"></a>my_mem_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[382]"></a>my_mem_malloc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[1]"></a>my_mem_perused</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[2b5]"></a>myfree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[2b3]"></a>mymalloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdCard_Config
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[380]"></a>mymemset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, malloc.o(i.mymemset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[2c9]"></a>setDataTime</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc.o(i.setDataTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setDataTime &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw24Hour
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw12Hour
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[2ae]"></a>spi1_init</STRONG> (Thumb, 194 bytes, Stack size 96 bytes, spi.o(i.spi1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi1_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayTimeConfig
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayStructInit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Init
</UL>

<P><STRONG><a name="[2cf]"></a>sw12Hour</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, rtc.o(i.sw12Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sw12Hour &rArr; setDataTime &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_Write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StructInit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataTime
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTime
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Period_IrqHandler
</UL>

<P><STRONG><a name="[2c3]"></a>sw24Hour</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, rtc.o(i.sw24Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sw24Hour &rArr; setDataTime &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_BKR_Write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StructInit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDataTime
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataTime
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IrqHandler
</UL>

<P><STRONG><a name="[375]"></a>systemClockConfig240MHZ</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, systemclockconfig.o(i.systemClockConfig240MHZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = systemClockConfig240MHZ &rArr; CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStructInit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLxStructInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLxInit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLStructInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[377]"></a>uart1_init</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, uart1.o(i.uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = uart1_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38a]"></a>usb_dc_init</STRONG> (Thumb, 732 bytes, Stack size 40 bytes, usb_dc_dwc2.o(i.usb_dc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_dc_init &rArr; usb_dc_low_level_init &rArr; CLK_SetUSBClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_dwc2_gccfg_conf
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_dwc2_delay_ms
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_set_txfifo
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_flush_txfifo
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_flush_rxfifo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
</UL>

<P><STRONG><a name="[38b]"></a>usb_dc_low_level_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, msc_storage.o(i.usb_dc_low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_dc_low_level_init &rArr; CLK_SetUSBClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetUSBClockSrc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[396]"></a>usbd_add_endpoint</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_add_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_add_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
</UL>

<P><STRONG><a name="[37e]"></a>usbd_add_interface</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_add_interface))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_init
</UL>

<P><STRONG><a name="[37c]"></a>usbd_desc_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_desc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_desc_register
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_init
</UL>

<P><STRONG><a name="[38d]"></a>usbd_dwc2_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_glue_hc.o(i.usbd_dwc2_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbd_dwc2_delay_ms &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[3a7]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usb_dc_dwc2.o(i.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
</UL>

<P><STRONG><a name="[39b]"></a>usbd_ep_close</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, usb_dc_dwc2.o(i.usbd_ep_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_close
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_endpoint
</UL>

<P><STRONG><a name="[3a6]"></a>usbd_ep_is_stalled</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dc_dwc2.o(i.usbd_ep_is_stalled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_is_stalled
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
</UL>

<P><STRONG><a name="[390]"></a>usbd_ep_open</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, usb_dc_dwc2.o(i.usbd_ep_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_flush_txfifo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_endpoint
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
</UL>

<P><STRONG><a name="[392]"></a>usbd_ep_set_stall</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usb_dc_dwc2.o(i.usbd_ep_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_bot_abort
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_out_complete_handler
</UL>

<P><STRONG><a name="[2ec]"></a>usbd_ep_start_read</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, usb_dc_dwc2.o(i.usbd_ep_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_notify_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_in
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_bot_abort
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write12
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write10
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_out_complete_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_in_complete_handler
</UL>

<P><STRONG><a name="[2e9]"></a>usbd_ep_start_write</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, usb_dc_dwc2.o(i.usbd_ep_start_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_info
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_out_complete_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_in_complete_handler
</UL>

<P><STRONG><a name="[25e]"></a>usbd_event_connect_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_event_connect_handler), UNUSED, KEPT)

<P><STRONG><a name="[25f]"></a>usbd_event_disconnect_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_event_disconnect_handler), UNUSED, KEPT)

<P><STRONG><a name="[a2]"></a>usbd_event_ep0_in_complete_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_event_ep0_in_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_event_ep0_in_complete_handler &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(i.usbd_desc_register)
</UL>
<P><STRONG><a name="[a3]"></a>usbd_event_ep0_out_complete_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_event_ep0_out_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = usbd_event_ep0_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(i.usbd_desc_register)
</UL>
<P><STRONG><a name="[260]"></a>usbd_event_ep0_setup_complete_handler</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_event_ep0_setup_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[261]"></a>usbd_event_ep_in_complete_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_event_ep_in_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_event_ep_in_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>usbd_event_ep_out_complete_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_event_ep_out_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_event_ep_out_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[263]"></a>usbd_event_reset_handler</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_event_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_event_reset_handler &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[264]"></a>usbd_event_resume_handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_event_resume_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[265]"></a>usbd_event_suspend_handler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbd_core.o(i.usbd_event_suspend_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[38c]"></a>usbd_get_dwc2_gccfg_conf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_glue_hc.o(i.usbd_get_dwc2_gccfg_conf))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[37f]"></a>usbd_initialize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbd_initialize &rArr; usb_dc_init &rArr; usb_dc_low_level_init &rArr; CLK_SetUSBClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_init
</UL>

<P><STRONG><a name="[398]"></a>usbd_msc_get_cap</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, msc_storage.o(i.usbd_msc_get_cap))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
</UL>

<P><STRONG><a name="[37d]"></a>usbd_msc_init_intf</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_msc.o(i.usbd_msc_init_intf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_msc_init_intf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_get_cap
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdb_msc_set_max_lun
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_endpoint
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_init
</UL>

<P><STRONG><a name="[2e8]"></a>usbd_msc_sector_read</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, msc_storage.o(i.usbd_msc_sector_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = usbd_msc_sector_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
</UL>

<P><STRONG><a name="[2eb]"></a>usbd_msc_sector_write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, msc_storage.o(i.usbd_msc_sector_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = usbd_msc_sector_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Norflash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
</UL>

<P><STRONG><a name="[393]"></a>usbd_set_address</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usb_dc_dwc2.o(i.usbd_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a8]"></a>PWC_REG_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32_ll.o(i.PWC_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[285]"></a>CLK_WaitStable</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hc32_ll_clk.o(i.CLK_WaitStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLxCmd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
</UL>

<P><STRONG><a name="[28c]"></a>PLLxParamCheck</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, hc32_ll_clk.o(i.PLLxParamCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PLLxParamCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLxInit
</UL>

<P><STRONG><a name="[28e]"></a>SetSysClockDiv</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, hc32_ll_clk.o(i.SetSysClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetSysClockDiv &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[291]"></a>SetSysClockSrc</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, hc32_ll_clk.o(i.SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetSysClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
</UL>

<P><STRONG><a name="[2b7]"></a>OTS_GetDfltPara</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, hc32_ll_ots.o(i.OTS_GetDfltPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OTS_GetDfltPara &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_Init
</UL>

<P><STRONG><a name="[309]"></a>SDMMC_GetCmdError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_sdioc.o(i.SDMMC_GetCmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_GetCmdError &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetIntStatus
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD0_GoIdleState
</UL>

<P><STRONG><a name="[306]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD8_SendInterfaceCond
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD6_SwitchFunc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD55_AppCmd
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD3_SendRelativeAddr
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD25_WriteMultipleBlock
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD24_WriteSingleBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD18_ReadMultipleBlock
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD17_ReadSingleBlock
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD16_SetBlockLength
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD13_SendStatus
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD6_SetBusWidth
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD51_SendSCR
</UL>

<P><STRONG><a name="[30b]"></a>SDMMC_GetCmdResp1Busy</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hc32_ll_sdioc.o(i.SDMMC_GetCmdResp1Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetHostStatus
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD7_SelectDeselectCard
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD6_SwitchFunc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD12_StopTrans
</UL>

<P><STRONG><a name="[313]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32_ll_sdioc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_GetCmdResp2 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD9_SendCSD
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD2_AllSendCID
</UL>

<P><STRONG><a name="[304]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32_ll_sdioc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_GetCmdResp3 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD41_SendOperateCond
</UL>

<P><STRONG><a name="[315]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hc32_ll_sdioc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD3_SendRelativeAddr
</UL>

<P><STRONG><a name="[31a]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32_ll_sdioc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_GetCmdResp7 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WaitResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD8_SendInterfaceCond
</UL>

<P><STRONG><a name="[31c]"></a>SDMMC_WaitResponse</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, hc32_ll_sdioc.o(i.SDMMC_WaitResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetIntStatus
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1Busy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[296]"></a>ClockSync_CalculateBrr</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, hc32_ll_usart.o(i.ClockSync_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ClockSync_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[340]"></a>SmartCard_CalculateBrr</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, hc32_ll_usart.o(i.SmartCard_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SmartCard_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[341]"></a>UART_CalculateBrr</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, hc32_ll_usart.o(i.UART_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_CalculateBrr &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[344]"></a>USART_GetBusClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32_ll_usart.o(i.USART_GetBusClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
</UL>

<P><STRONG><a name="[343]"></a>USART_GetUsartClockFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hc32_ll_usart.o(i.USART_GetUsartClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetUsartClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[338]"></a>SPI_TxRx</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, hc32_ll_spi.o(i.SPI_TxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransReceive
</UL>

<P><STRONG><a name="[339]"></a>SPI_WaitStatus</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, hc32_ll_spi.o(i.SPI_WaitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_WaitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxRx
</UL>

<P><STRONG><a name="[2ed]"></a>SDCard_GetCardTransState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sd_diskio.o(i.SDCard_GetCardTransState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SDCard_GetCardTransState &rArr; SD_GetCardState &rArr; SD_GetCurrCardStatus &rArr; SDMMC_CMD13_SendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Status
</UL>

<P><STRONG><a name="[32b]"></a>SD_ExtractCardCSD</STRONG> (Thumb, 146 bytes, Stack size 60 bytes, sd.o(i.SD_ExtractCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_ExtractCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[31d]"></a>SD_GetCurrCardStatus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd.o(i.SD_GetCurrCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_GetCurrCardStatus &rArr; SDMMC_CMD13_SendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD13_SendStatus
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSCR
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardState
</UL>

<P><STRONG><a name="[31e]"></a>SD_GetSCR</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, sd.o(i.SD_GetSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_GetSCR &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCurrCardStatus
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD55_AppCmd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD16_SetBlockLength
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD51_SendSCR
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[328]"></a>SD_InitCard</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_InitCard &rArr; SDMMC_CMD7_SelectDeselectCard &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ExtractCardCSD
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD9_SendCSD
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD7_SelectDeselectCard
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD3_SendRelativeAddr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD2_AllSendCID
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[327]"></a>SD_PowerCmd</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, sd.o(i.SD_PowerCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_PowerCmd &rArr; SDMMC_CMD8_SendInterfaceCond &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayMS
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD8_SendInterfaceCond
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD55_AppCmd
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD0_GoIdleState
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD41_SendOperateCond
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_PowerCmd
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[31f]"></a>SD_ReadWriteFifo</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, sd.o(i.SD_ReadWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD12_StopTrans
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_WriteBuffer
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetIntStatus
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetHostStatus
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetSpeedMode
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSCR
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlocks
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlocks
</UL>

<P><STRONG><a name="[329]"></a>SD_SetBusWidth</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sd.o(i.SD_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_SetBusWidth &rArr; SDMMC_CMD55_AppCmd &rArr; SDMMC_GetCmdResp1 &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD55_AppCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ACMD6_SetBusWidth
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[32a]"></a>SD_SetSpeedMode</STRONG> (Thumb, 198 bytes, Stack size 96 bytes, sd.o(i.SD_SetSpeedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadWriteFifo
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD6_SwitchFunc
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CMD16_SetBlockLength
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetSpeedMode
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClockDiv
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[356]"></a>check_fs</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[35b]"></a>create_partition</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, ff.o(i.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = create_partition &rArr; disk_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[371]"></a>find_volume</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[36a]"></a>get_fat</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[36c]"></a>get_ldnumber</STRONG> (Thumb, 134 bytes, Stack size 28 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[35a]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[358]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[369]"></a>mount_volume</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mount_volume &rArr; disk_initialize &rArr; SD_Initialize &rArr; SdCard_Config &rArr; SD_Init &rArr; SD_SetSpeedMode &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[357]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[35d]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[35e]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[37a]"></a>sync_window</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[38e]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, msc_storage.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[38f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, msc_storage.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>

<P><STRONG><a name="[a0]"></a>usbd_event_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, msc_storage.o(i.usbd_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> msc_storage.o(i.msc_storage_init)
</UL>
<P><STRONG><a name="[3a5]"></a>is_device_configured</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_core.o(i.is_device_configured))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_interface_req_handler
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
</UL>

<P><STRONG><a name="[394]"></a>usbd_class_event_notify_handler</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_class_event_notify_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
</UL>

<P><STRONG><a name="[3a0]"></a>usbd_class_request_handler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usbd_core.o(i.usbd_class_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_class_request_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[395]"></a>usbd_get_descriptor</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_get_descriptor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>

<P><STRONG><a name="[399]"></a>usbd_print_setup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_print_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_print_setup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[39a]"></a>usbd_reset_endpoint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.usbd_reset_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_reset_endpoint &rArr; usbd_ep_close
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_close
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
</UL>

<P><STRONG><a name="[39c]"></a>usbd_set_configuration</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, usbd_core.o(i.usbd_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_set_configuration &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>

<P><STRONG><a name="[39d]"></a>usbd_set_endpoint</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_set_endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
</UL>

<P><STRONG><a name="[39e]"></a>usbd_set_interface</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_set_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_endpoint
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_reset_endpoint
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_interface_req_handler
</UL>

<P><STRONG><a name="[391]"></a>usbd_setup_request_handler</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_setup_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = usbd_setup_request_handler &rArr; usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request_handler
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_print_setup
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_out_complete_handler
</UL>

<P><STRONG><a name="[39f]"></a>usbd_standard_request_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_core.o(i.usbd_standard_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = usbd_standard_request_handler &rArr; usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_interface_req_handler
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_endpoint_req_handler
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_std_device_req_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[3a2]"></a>usbd_std_device_req_handler</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_std_device_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = usbd_std_device_req_handler &rArr; usbd_set_configuration &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_configuration
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_get_descriptor
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_event_notify_handler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
</UL>

<P><STRONG><a name="[3a4]"></a>usbd_std_endpoint_req_handler</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, usbd_core.o(i.usbd_std_endpoint_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_std_endpoint_req_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_device_configured
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_is_stalled
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
</UL>

<P><STRONG><a name="[3a3]"></a>usbd_std_interface_req_handler</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, usbd_core.o(i.usbd_std_interface_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = usbd_std_interface_req_handler &rArr; usbd_set_interface &rArr; usbd_set_endpoint &rArr; usbd_ep_open &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_interface
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_device_configured
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request_handler
</UL>

<P><STRONG><a name="[3a1]"></a>usbd_vendor_request_handler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, usbd_core.o(i.usbd_vendor_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_vendor_request_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[2d3]"></a>SCSI_CBWDecode</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, usbd_msc.o(i.SCSI_CBWDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SCSI_CBWDecode &rArr; SCSI_read12 &rArr; SCSI_processRead &rArr; usbd_msc_sector_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_info
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write12
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write10
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_testUnitReady
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_startStopUnit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readFormatCapacity
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readCapacity10
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read12
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read10
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_preventAllowMediaRemoval
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense6
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
</UL>

<P><STRONG><a name="[2d5]"></a>SCSI_SetSenseData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_msc.o(i.SCSI_SetSenseData))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write12
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_write10
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_testUnitReady
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_startStopUnit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_requestSense
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readFormatCapacity
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_readCapacity10
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read12
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read10
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_preventAllowMediaRemoval
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense6
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_modeSense10
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_inquiry
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2d8]"></a>SCSI_inquiry</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, usbd_msc.o(i.SCSI_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCSI_inquiry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2dc]"></a>SCSI_modeSense10</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, usbd_msc.o(i.SCSI_modeSense10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCSI_modeSense10
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2db]"></a>SCSI_modeSense6</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_modeSense6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_modeSense6
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2da]"></a>SCSI_preventAllowMediaRemoval</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_msc.o(i.SCSI_preventAllowMediaRemoval))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_preventAllowMediaRemoval
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2e7]"></a>SCSI_processRead</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usbd_msc.o(i.SCSI_processRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SCSI_processRead &rArr; usbd_msc_sector_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_read
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_in
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read12
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_read10
</UL>

<P><STRONG><a name="[2ea]"></a>SCSI_processWrite</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbd_msc.o(i.SCSI_processWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SCSI_processWrite &rArr; usbd_msc_sector_write &rArr; SD_Write &rArr; SD_WriteBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_sector_write
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_send_csw
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
</UL>

<P><STRONG><a name="[2df]"></a>SCSI_read10</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SCSI_read10 &rArr; SCSI_processRead &rArr; usbd_msc_sector_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2e0]"></a>SCSI_read12</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_read12))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SCSI_read12 &rArr; SCSI_processRead &rArr; usbd_msc_sector_read &rArr; SD_Read &rArr; SD_ReadBlocks &rArr; SD_ReadWriteFifo &rArr; SDMMC_CMD12_StopTrans &rArr; SDMMC_GetCmdResp1Busy &rArr; SDMMC_WaitResponse &rArr; SDIOC_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processRead
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2de]"></a>SCSI_readCapacity10</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_readCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_readCapacity10
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2dd]"></a>SCSI_readFormatCapacity</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbd_msc.o(i.SCSI_readFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_readFormatCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2d7]"></a>SCSI_requestSense</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, usbd_msc.o(i.SCSI_requestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_requestSense
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2d9]"></a>SCSI_startStopUnit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd_msc.o(i.SCSI_startStopUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_startStopUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2d6]"></a>SCSI_testUnitReady</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_msc.o(i.SCSI_testUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_testUnitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2e1]"></a>SCSI_write10</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_write10 &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2e2]"></a>SCSI_write12</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, usbd_msc.o(i.SCSI_write12))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCSI_write12 &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SetSenseData
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[a4]"></a>msc_storage_class_interface_request_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_msc.o(i.msc_storage_class_interface_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msc_storage_class_interface_request_handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_reset
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc.o(i.usbd_msc_init_intf)
</UL>
<P><STRONG><a name="[379]"></a>usbd_msc_bot_abort</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbd_msc.o(i.usbd_msc_bot_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_msc_bot_abort &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
</UL>

<P><STRONG><a name="[37b]"></a>usbd_msc_reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_msc.o(i.usbd_msc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_notify_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_storage_class_interface_request_handler
</UL>

<P><STRONG><a name="[2e4]"></a>usbd_msc_send_csw</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_msc.o(i.usbd_msc_send_csw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_msc_send_csw &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_out
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_storage_bulk_in
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_processWrite
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[2e3]"></a>usbd_msc_send_info</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_msc.o(i.usbd_msc_send_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_msc_send_info &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CBWDecode
</UL>

<P><STRONG><a name="[397]"></a>usdb_msc_set_max_lun</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_msc.o(i.usdb_msc_set_max_lun))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_msc_init_intf
</UL>

<P><STRONG><a name="[348]"></a>dwc2_ep0_start_read_setup</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usb_dc_dwc2.o(i.dwc2_ep0_start_read_setup))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[34b]"></a>dwc2_flush_rxfifo</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, usb_dc_dwc2.o(i.dwc2_flush_rxfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dwc2_flush_rxfifo
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[34a]"></a>dwc2_flush_txfifo</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usb_dc_dwc2.o(i.dwc2_flush_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dwc2_flush_txfifo
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[34d]"></a>dwc2_get_devspeed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb_dc_dwc2.o(i.dwc2_get_devspeed))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[34e]"></a>dwc2_set_turnaroundtime</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, usb_dc_dwc2.o(i.dwc2_set_turnaroundtime))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[366]"></a>dwc2_set_txfifo</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usb_dc_dwc2.o(i.dwc2_set_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dwc2_set_txfifo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[349]"></a>dwc2_tx_fifo_empty_procecss</STRONG> (Thumb, 236 bytes, Stack size 36 bytes, usb_dc_dwc2.o(i.dwc2_tx_fifo_empty_procecss))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dwc2_tx_fifo_empty_procecss &rArr; dwc2_ep_write
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwc2_ep_write
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[351]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[350]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[354]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[353]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
